# =========================================
# EXAMPLE TERRAFORM VARIABLES
# Copy this file to terraform.tfvars and customize
# =========================================

# Project Configuration
project_id      = "your-gcp-project-id"
organization_id = "123456789012"  # Optional
folder_id      = ""              # Optional

# Basic Configuration
environment    = "dev"
project_name   = "shivani-infrastructure"
default_region = "us-central1"
default_zone   = "us-central1-a"

# Labels
default_labels = {
  managed-by   = "terraform"
  environment  = "dev"
  team         = "infrastructure"
  cost-center  = "engineering"
}

# Feature Flags
create_network = true
create_storage = true
create_iam     = true

# Network Configuration
network_config = {
  network_name = "main-vpc"
  
  subnets = {
    "web-subnet" = {
      ip_cidr_range            = "10.0.1.0/24"
      region                   = "us-central1"
      description              = "Subnet for web tier"
      private_ip_google_access = true
      secondary_ranges = [
        {
          range_name    = "web-services"
          ip_cidr_range = "10.1.0.0/16"
        }
      ]
    }
    
    "app-subnet" = {
      ip_cidr_range            = "10.0.2.0/24"
      region                   = "us-central1"
      description              = "Subnet for application tier"
      private_ip_google_access = true
    }
    
    "data-subnet" = {
      ip_cidr_range            = "10.0.3.0/24"
      region                   = "us-central1"
      description              = "Subnet for data tier"
      private_ip_google_access = true
    }
  }
  
  enable_nat        = true
  nat_regions       = ["us-central1"]
  enable_iap        = false
  iap_support_email = "admin@company.com"
}

# Storage Configuration
storage_config = {
  buckets = {
    "app-data-bucket" = {
      location               = "US"
      storage_class         = "STANDARD"
      versioning_enabled    = true
      force_destroy         = false  # Set to true for dev/test environments
      labels = {
        purpose = "application-data"
      }
    }
    
    "backup-bucket" = {
      location      = "US"
      storage_class = "COLDLINE"
      labels = {
        purpose = "backups"
      }
    }
    
    "logs-bucket" = {
      location      = "US"
      storage_class = "NEARLINE"
      labels = {
        purpose = "application-logs"
      }
    }
    
    "archive-bucket" = {
      location      = "US"
      storage_class = "ARCHIVE"
      labels = {
        purpose = "long-term-archive"
      }
    }
  }
}

# IAM Configuration
iam_config = {
  service_accounts = {
    "app-service-account" = {
      display_name = "Application Service Account"
      description  = "Service account for application workloads"
    }
    
    "backup-service-account" = {
      display_name = "Backup Service Account" 
      description  = "Service account for backup operations"
    }
    
    "monitoring-service-account" = {
      display_name = "Monitoring Service Account"
      description  = "Service account for monitoring and logging"
    }
  }
  
  project_iam_bindings = {
    "roles/monitoring.metricWriter" = {
      members = [
        # Will be populated with service account after creation
      ]
    }
  }
}

# =========================================
# COMPUTE CONFIGURATION
# =========================================

# Set to true to create compute resources
create_compute = true

compute_config = {
  # VM instances configuration - user-friendly and flexible
  vm_instances = {
    # Example 1: Simple web server with external IP
    web-server = {
      name           = "my-web-server"           # Custom VM name
      zone           = "us-central1-a"           # GCP zone
      machine_type   = "e2-medium"               # 1 vCPU, 4GB RAM
      boot_disk_size = 20                       # 20GB boot disk
      
      # Network configuration - select your VPC and subnet
      network_name   = "shivani-dev-vpc-network" # Must match network module
      subnet_name    = "shivani-dev-web-subnet"  # Must match network module
      external_ip    = true                      # Create external IP for internet access
      
      # Security tags for firewall rules
      network_tags   = ["web-server", "http-server"]
      
      # Enable SSH access
      enable_ssh_access = true
      
      # Optional: Add SSH keys
      ssh_keys = [
        # "username:ssh-rsa AAAAB3NzaC1yc2E... username@example.com"
      ]
      
      # Optional: Startup script to install software
      startup_script = <<-EOF
        #!/bin/bash
        apt-get update
        apt-get install -y nginx
        systemctl enable nginx
        systemctl start nginx
        echo "<h1>Welcome to $(hostname)</h1>" > /var/www/html/index.html
      EOF
      
      # Optional: Custom labels
      labels = {
        environment = "development"
        application = "web-frontend"
      }
    }

    # Example 2: Application server without external IP
    app-server = {
      name           = "my-app-server"
      zone           = "us-central1-b"
      machine_type   = "e2-standard-2"           # 2 vCPU, 8GB RAM
      boot_disk_size = 30
      boot_disk_type = "pd-ssd"                  # SSD for better performance
      
      # Network configuration - private subnet
      network_name   = "shivani-dev-vpc-network"
      subnet_name    = "shivani-dev-app-subnet"
      external_ip    = false                     # No external IP - internal only
      internal_ip    = "10.0.2.10"              # Optional: static internal IP
      
      # Security tags
      network_tags   = ["app-server", "internal-only"]
      
      # Service account (optional)
      # service_account = "my-app-sa@PROJECT_ID.iam.gserviceaccount.com"
      
      # Additional storage
      additional_disks = [
        {
          name = "app-data"
          size = 50                              # 50GB additional disk
          type = "pd-standard"
        }
      ]
      
      # Startup script for application setup
      startup_script = <<-EOF
        #!/bin/bash
        apt-get update
        apt-get install -y docker.io
        systemctl enable docker
        systemctl start docker
        usermod -aG docker $USER
      EOF
      
      labels = {
        environment = "development"
        application = "backend-api"
        tier       = "application"
      }
    }

    # Example 3: Database server with high-performance setup
    # database-server = {
    #   name           = "prod-database"
    #   zone           = "us-central1-c"
    #   machine_type   = "n2-standard-4"         # 4 vCPU, 16GB RAM
    #   boot_disk_size = 50
    #   boot_disk_type = "pd-ssd"
    #   
    #   # Use custom OS image
    #   image_family   = "ubuntu-2204-lts"
    #   image_project  = "ubuntu-os-cloud"
    #   
    #   network_name   = "shivani-dev-vpc-network"
    #   subnet_name    = "shivani-dev-app-subnet"
    #   external_ip    = false
    #   internal_ip    = "10.0.2.20"
    #   
    #   network_tags   = ["database-server", "no-external"]
    #   
    #   additional_disks = [
    #     {
    #       name = "database-data"
    #       size = 200
    #       type = "pd-ssd"
    #     },
    #     {
    #       name = "database-logs"
    #       size = 50
    #       type = "pd-standard"
    #     }
    #   ]
    #   
    #   metadata = {
    #     environment = "production"
    #     backup     = "daily"
    #   }
    #   
    #   labels = {
    #     environment = "production"
    #     application = "database"
    #     tier       = "data"
    #   }
    # }
  }

  # Additional firewall rules for compute instances
  firewall_rules = {
    # Allow HTTP/HTTPS traffic to web servers
    "allow-web-traffic" = {
      description   = "Allow HTTP and HTTPS traffic to web servers"
      source_ranges = ["0.0.0.0/0"]
      target_tags   = ["web-server"]
      allow = [
        {
          protocol = "tcp"
          ports    = ["80", "443"]
        }
      ]
    }

    # Allow internal communication between app and database
    # "allow-app-to-db" = {
    #   description   = "Allow app servers to access database"
    #   source_ranges = ["10.0.2.0/24"]  # App subnet CIDR
    #   target_tags   = ["database-server"]
    #   allow = [
    #     {
    #       protocol = "tcp"
    #       ports    = ["5432", "3306"]  # PostgreSQL, MySQL
    #     }
    #   ]
    # }
  }

  # Optional: Create a load balancer for web servers
  create_load_balancer = false
  load_balancer_config = {
    name                = "web-load-balancer"
    health_check_path   = "/"
    health_check_port   = 80
    backend_port        = 80
    session_affinity    = "NONE"
    enable_cdn          = false
  }
}
